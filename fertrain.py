{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"fertrain.py","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python2","display_name":"Python 2"}},"cells":[{"cell_type":"code","metadata":{"id":"kiMTH_bwYGuA","colab_type":"code","colab":{}},"source":["import sys, os\n","import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from keras.layers import Conv2D, MaxPooling2D, BatchNormalization\n","from keras.losses import categorical_crossentropy\n","from keras.optimizers import Adam\n","from keras.regularizers import l2\n","\n","num_features = 64\n","num_labels = 7\n","batch_size = 64\n","epochs = 100\n","width, height = 48, 48\n","\n","x = np.load('./features.npy')\n","y = np.load('./labels.npy')\n","\n","x -= np.mean(x, axis=0)\n","x /= np.std(x, axis=0)\n","\n","\n","# splitting into training, validation and testing data\n","X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.1, random_state=42)\n","X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size=0.1, random_state=41)\n","\n","#saving the test samples to be used later\n","np.save('modelXtest', X_test)\n","np.save('modelytest', y_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"JLLObjSbavxW","colab_type":"code","colab":{}},"source":["#desinging the CNN\n","model = Sequential()\n","\n","model.add(Conv2D(num_features, kernel_size=(3, 3), activation='relu', input_shape=(width, height, 1), data_format='channels_last', kernel_regularizer=l2(0.01)))\n","model.add(Conv2D(num_features, kernel_size=(3, 3), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n","model.add(Dropout(0.5))\n","\n","model.add(Conv2D(2*num_features, kernel_size=(3, 3), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(2*num_features, kernel_size=(3, 3), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n","model.add(Dropout(0.5))\n","\n","model.add(Conv2D(2*2*num_features, kernel_size=(3, 3), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(2*2*num_features, kernel_size=(3, 3), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n","model.add(Dropout(0.5))\n","\n","model.add(Conv2D(2*2*2*num_features, kernel_size=(3, 3), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(Conv2D(2*2*2*num_features, kernel_size=(3, 3), activation='relu', padding='same'))\n","model.add(BatchNormalization())\n","model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))\n","model.add(Dropout(0.5))\n","\n","model.add(Flatten())\n","\n","model.add(Dense(2*2*2*num_features, activation='relu'))\n","model.add(Dropout(0.4))\n","model.add(Dense(2*2*num_features, activation='relu'))\n","model.add(Dropout(0.4))\n","model.add(Dense(2*num_features, activation='relu'))\n","model.add(Dropout(0.5))\n","\n","model.add(Dense(num_labels, activation='softmax'))\n","\n","model.summary()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"bY1frbb1a0h6","colab_type":"code","colab":{}},"source":["#Compliling the model with adam optimixer and categorical crossentropy loss\n","model.compile(loss=categorical_crossentropy,\n","              optimizer=Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=1e-7),\n","              metrics=['accuracy'])\n","\n","#training the model\n","model.fit(np.array(X_train), np.array(y_train),\n","          batch_size=batch_size,\n","          epochs=epochs,\n","          verbose=1,\n","          validation_data=(np.array(X_valid), np.array(y_valid)),\n","          shuffle=True)\n","\n","#saving the  model to be used later\n","fer_json = model.to_json()\n","with open(\"fer.json\", \"w\") as json_file:\n","    json_file.write(fer_json)\n","model.save_weights(\"fer.h5\")\n","print(\"Saved model to disk\")"],"execution_count":0,"outputs":[]}]}